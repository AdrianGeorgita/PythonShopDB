-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-01-07 20:24:53 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE clienti (
    id_client        NUMBER(5) NOT NULL,
    adresa_facturare VARCHAR2(100 CHAR) NOT NULL,
    numar_telefon    VARCHAR2(15 CHAR) NOT NULL,
    email            VARCHAR2(320 CHAR)
);

ALTER TABLE clienti
    ADD CONSTRAINT clienti_numar_ck CHECK ( REGEXP_LIKE ( numar_telefon,
                                                          '^\+?[0-9\s()-]{6,14}$' ) );

ALTER TABLE clienti
    ADD CONSTRAINT client_email_ck CHECK ( REGEXP_LIKE ( email,
                                                         '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE clienti ADD CONSTRAINT clienti_pk PRIMARY KEY ( id_client );

ALTER TABLE clienti ADD CONSTRAINT "Clienti_E-mail_UN" UNIQUE ( email );

ALTER TABLE clienti ADD CONSTRAINT clienti_numar_telefon_un UNIQUE ( numar_telefon );

CREATE TABLE coduri_promotionale (
    clienti_id_client  NUMBER(5) NOT NULL,
    comenzi_id_comanda NUMBER(8) NOT NULL,
    cod_voucher        NUMBER(5) NOT NULL,
    procent_reducere   NUMBER(2) DEFAULT 0 NOT NULL,
    data_inceput       DATE NOT NULL,
    data_sfarsit       DATE NOT NULL,
    descriere          VARCHAR2(500)
);

ALTER TABLE coduri_promotionale
    ADD CONSTRAINT coduri_promo_procent_ck CHECK ( procent_reducere BETWEEN 1 AND 100 );

ALTER TABLE coduri_promotionale ADD CONSTRAINT coduri_promo_data_sfarsit_ck CHECK ( data_sfarsit > data_inceput );

ALTER TABLE coduri_promotionale ADD CONSTRAINT coduri_promotionale_pk PRIMARY KEY ( clienti_id_client,
                                                                                    comenzi_id_comanda );

CREATE TABLE comenzi (
    id_comanda        NUMBER(8) NOT NULL,
    data_inregistrare DATE NOT NULL,
    data_preluare     DATE,
    status            VARCHAR2(50 CHAR) DEFAULT 'Comanda_Inregistrata' NOT NULL,
    id_client         NUMBER(5) NOT NULL,
    id_produs         NUMBER(10),
    cantitate         NUMBER(3) NOT NULL
);

ALTER TABLE comenzi ADD CONSTRAINT comenzi_data_preluare_ck CHECK ( data_preluare > data_inregistrare );

ALTER TABLE comenzi
    ADD CONSTRAINT status_comanda_ck CHECK ( status IN ( 'Comadna_In_Curs_De_Livrare', 'Comanda_Expediata', 'Comanda_Inregistrata', 'Plata_Acceptata'
    , 'Produse_Ridicate' ) );

ALTER TABLE comenzi ADD CONSTRAINT comenzi_cantitate_ck CHECK ( cantitate > 0 );

ALTER TABLE comenzi ADD CONSTRAINT comenzi_pk PRIMARY KEY ( id_comanda );

CREATE TABLE conturi (
    username       VARCHAR2(50 CHAR) NOT NULL,
    parola         VARCHAR2(128 CHAR) NOT NULL,
    data_creare    DATE NOT NULL,
    status_cont    VARCHAR2(20 CHAR) DEFAULT 'Normal' NOT NULL,
    adresa_livrare VARCHAR2(100 CHAR),
    id_client      NUMBER(5) NOT NULL
);

ALTER TABLE conturi
    ADD CONSTRAINT status_cont_ck CHECK ( status_cont IN ( 'Normal', 'Premium', 'Restrictionat' ) );

CREATE UNIQUE INDEX conturi__idx ON
    conturi (
        id_client
    ASC );

ALTER TABLE conturi ADD CONSTRAINT conturi_pk PRIMARY KEY ( username );

CREATE TABLE cosuri (
    id_cos    NUMBER(8) NOT NULL,
    cantitate NUMBER(3) NOT NULL,
    id_client NUMBER(5) NOT NULL,
    id_produs NUMBER(10)
);

ALTER TABLE cosuri ADD CONSTRAINT cosuri_cantitate_ck CHECK ( cantitate > 0 );

ALTER TABLE cosuri ADD CONSTRAINT cosuri_pk PRIMARY KEY ( id_cos );

CREATE TABLE produse (
    id_produs   NUMBER(10) NOT NULL,
    denumire    VARCHAR2(128) NOT NULL,
    pret        NUMBER(5) NOT NULL,
    producator  VARCHAR2(50 CHAR) NOT NULL,
    stoc        NUMBER(4) NOT NULL,
    categorie   VARCHAR2(100 CHAR) DEFAULT 'Diverse' NOT NULL,
    garantie    NUMBER(2) DEFAULT 1,
    descriere   VARCHAR2(2000 CHAR),
    id_promotie NUMBER(4) NOT NULL
);

ALTER TABLE produse ADD CONSTRAINT pret_produs_ck CHECK ( pret > 0 );

ALTER TABLE produse ADD CONSTRAINT stoc_produs_ck CHECK ( stoc >= 0 );

ALTER TABLE produse
    ADD CONSTRAINT categorie_produs_ck CHECK ( categorie IN ( 'Audio-Video', 'Auto', 'Bacanie', 'Birotica', 'Bricolaj',
                                                              'Carti', 'Casa', 'Diverse', 'Electrocasnice', 'Fashion',
                                                              'Foto', 'Gaming', 'Gradina', 'Laptop', 'Moto',
                                                              'PC', 'Periferice', 'Software', 'TV', 'Tablete',
                                                              'Telefoane' ) );

ALTER TABLE produse
    ADD CONSTRAINT garantie_produs_ck CHECK ( garantie BETWEEN 1 AND 99 );

ALTER TABLE produse ADD CONSTRAINT produse_pk PRIMARY KEY ( id_produs );

ALTER TABLE produse ADD CONSTRAINT produse_denumire_producator_uk UNIQUE ( producator,
                                                                           denumire );

CREATE TABLE promotii (
    id_promotie      NUMBER(4) NOT NULL,
    procent_reducere NUMBER(2) DEFAULT 0 NOT NULL,
    data_inceput     DATE NOT NULL,
    data_sfarsit     DATE,
    descriere        VARCHAR2(500 CHAR)
);

ALTER TABLE promotii
    ADD CONSTRAINT procent_promotie_ck CHECK ( procent_reducere BETWEEN 0 AND 100 );

ALTER TABLE promotii ADD CONSTRAINT promotii_data_sfarsit_ck CHECK ( data_sfarsit > data_inceput );

ALTER TABLE promotii ADD CONSTRAINT promotii_pk PRIMARY KEY ( id_promotie );

CREATE TABLE wishlists (
    id_wishlist  NUMBER(8) NOT NULL,
    nume         VARCHAR2(50 CHAR) NOT NULL,
    data_creare  DATE NOT NULL,
    vizibilitate VARCHAR2(32) DEFAULT 'Privat' NOT NULL,
    id_client    NUMBER(5) NOT NULL,
    id_produs    NUMBER(10)
);

ALTER TABLE wishlists
    ADD CONSTRAINT wishlists_vizibilitate_ck CHECK ( vizibilitate IN ( 'Nelistat', 'Privat', 'Public' ) );

ALTER TABLE wishlists ADD CONSTRAINT wishlists_pk PRIMARY KEY ( id_wishlist );

ALTER TABLE comenzi
    ADD CONSTRAINT clienti_comenzi_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client );

ALTER TABLE conturi
    ADD CONSTRAINT clienti_conturi_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client );

ALTER TABLE cosuri
    ADD CONSTRAINT clienti_cosuri_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client );

ALTER TABLE wishlists
    ADD CONSTRAINT clienti_wishlists_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client );

ALTER TABLE coduri_promotionale
    ADD CONSTRAINT coduri_promotionale_clienti_fk FOREIGN KEY ( clienti_id_client )
        REFERENCES clienti ( id_client );

ALTER TABLE coduri_promotionale
    ADD CONSTRAINT coduri_promotionale_comenzi_fk FOREIGN KEY ( comenzi_id_comanda )
        REFERENCES comenzi ( id_comanda );

ALTER TABLE comenzi
    ADD CONSTRAINT produse_comenzi_fk FOREIGN KEY ( id_produs )
        REFERENCES produse ( id_produs );

ALTER TABLE cosuri
    ADD CONSTRAINT produse_cosuri_fk FOREIGN KEY ( id_produs )
        REFERENCES produse ( id_produs );

ALTER TABLE wishlists
    ADD CONSTRAINT produse_wishlists_fk FOREIGN KEY ( id_produs )
        REFERENCES produse ( id_produs );

ALTER TABLE produse
    ADD CONSTRAINT promotii_produse_fk FOREIGN KEY ( id_promotie )
        REFERENCES promotii ( id_promotie );

CREATE SEQUENCE clienti_id_client_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER clienti_id_client_trg BEFORE
    INSERT ON clienti
    FOR EACH ROW
    WHEN ( new.id_client IS NULL )
BEGIN
    :new.id_client := clienti_id_client_seq.nextval;
END;
/

CREATE SEQUENCE comenzi_id_comanda_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER comenzi_id_comanda_trg BEFORE
    INSERT ON comenzi
    FOR EACH ROW
    WHEN ( new.id_comanda IS NULL )
BEGIN
    :new.id_comanda := comenzi_id_comanda_seq.nextval;
END;
/

CREATE SEQUENCE cosuri_id_cos_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cosuri_id_cos_trg BEFORE
    INSERT ON cosuri
    FOR EACH ROW
    WHEN ( new.id_cos IS NULL )
BEGIN
    :new.id_cos := cosuri_id_cos_seq.nextval;
END;
/

CREATE SEQUENCE produse_id_produs_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER produse_id_produs_trg BEFORE
    INSERT ON produse
    FOR EACH ROW
    WHEN ( new.id_produs IS NULL )
BEGIN
    :new.id_produs := produse_id_produs_seq.nextval;
END;
/

CREATE SEQUENCE promotii_id_promotie_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER promotii_id_promotie_trg BEFORE
    INSERT ON promotii
    FOR EACH ROW
    WHEN ( new.id_promotie IS NULL )
BEGIN
    :new.id_promotie := promotii_id_promotie_seq.nextval;
END;
/

CREATE SEQUENCE wishlists_id_wishlist_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER wishlists_id_wishlist_trg BEFORE
    INSERT ON wishlists
    FOR EACH ROW
    WHEN ( new.id_wishlist IS NULL )
BEGIN
    :new.id_wishlist := wishlists_id_wishlist_seq.nextval;
END;
/

CREATE OR REPLACE TRIGGER COMENZI_CANTITATE_TRG
BEFORE INSERT ON comenzi
FOR EACH ROW
DECLARE
    v_stock NUMBER;
BEGIN
    -- Retrieve the current stock quantity for the product
    SELECT stoc INTO v_stock
    FROM produse
    WHERE ID_produs = :NEW.ID_produs;

    -- Check if there's enough stock for the order
    IF :NEW.cantitate > v_stock THEN
        -- Raise an exception to trigger a rollback
        RAISE_APPLICATION_ERROR(-20001, 'Stoc Insuficient.');
    ELSE
        -- If there's enough stock, decrease the stock by the ordered quantity
        UPDATE produse
        SET stoc = stoc - :NEW.cantitate
        WHERE ID_produs = :NEW.ID_produs;
    END IF;
END;
/

-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             37
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          6
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
